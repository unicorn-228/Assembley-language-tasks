#include <iostream>

using namespace std;

/*
Веретило Илья, 1 курс , 7 группа
С8.0	Дано натуральное n. Подсчитать  количество  решений неравенства  x*x + y*y < n в натуральных
(неотрицательных целых) числах, не используя действий с вещественными числами.

примеры :

введите n 1212121
кол-во таких комбинаций = 950858

введите n 15111
кол-во таких комбинаций = 11736

введите n 12345
кол-во таких комбинаций = 9588

принцип работы :
считаем число, которое примерно является корнем из исходного числа
перебираем все иксы и игрики до такого числа, которое приблизительно корень из исходного числа
проверяем подходят ли такие иксы и игрики для нашего выражения
если подходят, то увеличиваем переменную, котоа хранит реультат
*/
int koren(int a) {
	int i = 1;
	for (; i < a; i++) {
		if (i*i >= a)
			break;
	}
	i--;
	return i;
}

int qwerty(int w , int n) {
	//эта функция считает ответ задачи
	/*
	ассемблерная вставка это аналог вот такого цикла на c++ :
	for (long long int i = n / w; i >= 1; i--) {	//перебираем все i до такого числа, которое приблизительно корень из исходного числа
		for (long long int q = n / w; q >= 1; q--) {	//перебираем все q до такого числа, которое приблизительно корень из исходного числа
			if (q*q + i * i < n) {	//если выполняется наше условие , то увеличиваем кол-во таких пар
				result++;
			}
		}
	} 
	*/
	int temp1 = n / w;
	int i = temp1;
	int q = temp1;
	int result = 0;
	int temp = 0;
	_asm {
		mov ecx , i
		loop1: mov ecx , q //первый цикл (по i)
			   loop2: mov eax , ecx //второй цикл (по q)
					  //далее идет подсчет выражения i*i + q*q
					  mov edx , 0
					  mul ecx
					  mov temp , eax
					  mov eax , i
					  mov edx , 0
					  mul i
					  add temp , eax
					  mov eax , n
					  cmp temp , eax
					  jnl skipNext //если наше условие не выполняется, то пропускаем слудущую операцию
					  add result , 1 //если выполняется, то увеличиваем результат
					  skipNext: 
		              sub q , 1 //уменьшаем q
					  mov ecx , q
						  add ecx , 1
					  loop loop2
			   sub i , 1 //уменьшаем i
						  mov eax , temp1 //возвращаем q в начальное положение равное n / w
						mov q , eax
			   mov ecx , i
						  add ecx , 1
						  loop loop1
	}
	return result;
}

void main() {
	setlocale(LC_ALL, ".1251");
	long long int n, result = 0;
	cout << "введите n ";
	cin >> n;
	int w = koren(n); //считаем прибизительный корень из числа n
	result = qwerty(w, n); //запускаем проверку на ассемблере
	cout << endl << "кол-во таких комбинаций = " << result << endl;
	system("pause");
}